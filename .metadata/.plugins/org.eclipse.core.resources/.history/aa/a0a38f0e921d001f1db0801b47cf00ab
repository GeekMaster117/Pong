package onlineFramework;

import java.io.*;
import java.net.*;

import com.github.kwhat.jnativehook.keyboard.NativeKeyEvent;

import engine.Canvas;
import functionalities.Functionalities;

public class Server extends Functionalities
{
    private ServerSocket serverSocket;
    private ClientHandle player1;
    private ClientHandle player2;
    private volatile Canvas background1;
    private volatile Canvas background2;
    
    private enum LobbySelect
	{	
		Toggle_Ready,
		Back;
		
		public String getDisplayName()
		{
			return this.toString().replace('_', ' ');
		}
	}
    
    private enum display
    {
    	Lobby,
    	Level;
    }
    
    private display currentDisplay = display.Lobby;
    
    private boolean exitStatus = false;
    
    private int selectPointer1 = 0, selectPointer2 = 0;
    private boolean ready1 = false, ready2 = false;
    
    private void displayServerIP()
	{
		String str = "Server Hosted on Address: " + this.getIPV4();
		this.background1.insertString(str,
				this.getMiddleXPosition(this.background1.getWidth(), this.background1.getHeight(), str.length()), 
				4, 
				str.length(), 
				1);
	}
    
	private void displayLobby(Canvas background)
	{
		int width = 50;
		String player1Name = (this.player1.playerName == null) ? "Waiting to Join..." : this.player1.playerName;
		String player2Name = (this.player2.playerName == null) ? "Waiting to Join..." : this.player2.playerName;
		String ready1Status = (this.ready1 == true) ? "Ready" : "Not Ready";
		String ready2Status = (this.ready2 == true) ? "Ready" : "Not Ready";
		background.insertXLine('|',
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width),
				5,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width),
				9);
		background.insertXLine('|',
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - 1,
				5,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - 1, 
				9);
		background.insertXLine('-',
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width), 
				5,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - 1,
				5);
		background.insertXLine('-',
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width), 
				9,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - 1,
				9);
		background.insertXLine('-',
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width),
				7,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - 1,
				7);
		background.insertString(player1Name,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + 2,
				6,
				player1Name.length(),
				1);
		if(this.player1.playerName != null)
			background.insertString(ready1Status,
					this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - ready1Status.length() - 2,
					6,
					ready1Status.length(),
					1);
		background.insertString(player2Name,
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + 2,
				8,
				player2Name.length(),
				1);
		if(this.player2.playerName != null)
			background.insertString(ready2Status,
					this.getMiddleXPosition(background.getWidth(), background.getHeight(), width) + width - ready2Status.length() - 2,
					8,
					ready2Status.length(),
					1);
	}
	
	private void displayEnum(LobbySelect s, int offsetX, int offsetY, Canvas background, boolean showPointer)
	{
		background.insertString(s.getDisplayName(), 
				this.getMiddleXPosition(background.getWidth(), background.getHeight(), s.getDisplayName().length()) + offsetX, 
				this.getMiddleYPosition(background.getWidth(), background.getHeight(), 1) + offsetY, 
				s.getDisplayName().length(), 
				1);
		
		if(showPointer)
			background.insertString("->", 
					this.getMiddleXPosition(background.getWidth(), background.getHeight(), s.getDisplayName().length()) + offsetX - 3, 
					this.getMiddleYPosition(background.getWidth(), background.getHeight(), 1) + offsetY, 
					2, 1);
	}
	
	private void startGame()
	{
		String str = "Starting in ";
		long currentTime = System.currentTimeMillis();
		for(int i = 5; i > 0; --i)
		{
			if(this.ready1 && this.ready2 && System.currentTimeMillis() - currentTime >= 1000)
			{
				this.background1.insertString(str + String.valueOf(i),
						this.getMiddleXPosition(this.background1.getWidth(), this.background1.getHeight(), str.length() + 1),
						19,
						str.length() + 1,
						1);
				this.background2.insertString(str + String.valueOf(i),
						this.getMiddleXPosition(this.background1.getWidth(), this.background1.getHeight(), str.length() + 1),
						19,
						str.length() + 1,
						1);
				currentTime = System.currentTimeMillis();
			}
			else
				break;
		}
	}
	
	private void handleLobbyInput(NativeKeyEvent e, ClientHandle player)
	{
		if(e == null)
			return;
		switch(e.getKeyCode())
		{
			case NativeKeyEvent.VC_UP:
				if(player.equals(this.player1))
					this.selectPointer1 = Math.max(--this.selectPointer1, 0);
				else if(player.equals(this.player2))
					this.selectPointer2 = Math.max(--this.selectPointer2, 0);
				break;
			case NativeKeyEvent.VC_DOWN:
				if(player.equals(this.player1))
				{
					this.selectPointer1 = Math.min(++this.selectPointer1, LobbySelect.values().length - 1);
				}
				else if(player.equals(player2))
					this.selectPointer2 = Math.min(++this.selectPointer2, LobbySelect.values().length - 1);
				break;
			case NativeKeyEvent.VC_ENTER:
				if(player.equals(this.player1))
				{
					if(LobbySelect.values()[selectPointer1] == LobbySelect.Toggle_Ready)
						this.ready1 = !ready1;
					else
					{
						this.player1.end();
						this.exitStatus = true;
						this.end();
					}
				}
				else if(player.equals(this.player2))
				{
					if(LobbySelect.values()[selectPointer2] == LobbySelect.Toggle_Ready)
						this.ready2 = !ready2;
					else
					{
						this.selectPointer2 = 0;
						this.ready2 = false;
						this.player2.end();
					}
				}
				break;
		}
	}
    
    public void start()
    {
        try
        {	
        	this.serverSocket = new ServerSocket(12345);
        	this.background1 = new Canvas(120, 30);
        	this.background2 = new Canvas(120, 30);

            this.player1 = new ClientHandle(this.serverSocket);
            this.player2 = new ClientHandle(this.serverSocket);
            
            this.player1.setName("Player1");
            this.player2.setName("Player2");
            
            try 
            {
				Thread.sleep(100);
			}
            catch (InterruptedException e)
            {
				e.printStackTrace();
			}
            this.player2.start();
            
            this.startGame();
            
            while(!this.exitStatus)
            {
            	this.background1.clearCanvas();
            	this.background2.clearCanvas();
            	
            	if(this.currentDisplay == display.Lobby)
            	{
            		this.handleLobbyInput(this.player1.playerInput, this.player1);
                	this.player1.playerInput = null;
                    this.handleLobbyInput(this.player2.playerInput, this.player2);
                    this.player2.playerInput = null;
                    
                    this.displayServerIP();
                	this.displayLobby(this.background1);
                	this.displayLobby(this.background2);

                	for(int i = 0; i < LobbySelect.values().length; ++i)
                	{
                		this.displayEnum(LobbySelect.values()[i], 0, 2 * i, this.background1, this.selectPointer1 == i);
                		this.displayEnum(LobbySelect.values()[i], 0, 2 * i, this.background2, this.selectPointer2 == i);
                	}
            	}
                
            	this.displayBorders(this.background1);
            	this.displayBorders(this.background2);
            	
            	this.player1.setDisplay(this.background1.getData());
            	this.player2.setDisplay(this.background2.getData());
            	
            	if(player1.exit && !this.player1.isInterrupted())
            	{
            		player1 = new ClientHandle(this.serverSocket);
            		this.player1.setName("Player1");
            		player1.start();
            	}
            	if(player2.exit && !this.player1.isInterrupted())
            	{
            		player2 = new ClientHandle(this.serverSocket);
            		this.player1.setName("Player2");
            		player2.start();
            	}
            }
        }
        catch (SocketException e)
        {
        	return;
        }
        catch (IOException e) 
        {
            e.printStackTrace();
            System.exit(-1);
        }
    }
    
    public void end()
    {
    	try
    	{
    		if(this.player1 != null)
    			this.player1.end();
    		if(this.player2 != null)
    			this.player2.end();
    		if(this.serverSocket != null)
    			this.serverSocket.close();
		}
    	catch (IOException e)
    	{
			e.printStackTrace();
			System.exit(-1);
		}
    }
}
